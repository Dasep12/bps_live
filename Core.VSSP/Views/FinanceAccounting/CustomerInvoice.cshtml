@model Core.VSSP.Models.CustomerInvoiceListModel

<section class="app-section" id="Invoicing-CustomerInvoice">
    <div class="card card-accent-secondary">
        <div class="card-header bg-white">
            <div class="row">
                <div class="col-md-11">
                    <div class="card-title mt-1">
                        <i class="@ViewBag.IconClass"></i> @ViewBag.Title
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="dropdown">
                        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="fa fa-filter"></span> Filter
                        </button>
                        <form id="form-filter" class="dropdown-menu dropdown-menu-right p-4 bg-light" style="width:320px">
                            <h6>Filter @ViewBag.Title</h6>
                            <hr />
                            <div class="form-group form-group-sm">
                                <div class="input-group input-group-sm">
                                    <input id="searchFilter" name="searchFilter" type="text" class="form-control" placeholder="Invoice Number or Customer...">
                                    <div class="input-group-append">
                                        <span class="input-group-text"><i class="fa fa-navicon"></i></span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group form-group-sm">
                                <label for="startdateFilter" class="col-form-label col-form-label-sm">Date</label>
                                <div class="input-group input-group-sm">
                                    <input id="startdateFilter" type="date" class="form-control input-daterange" placeholder="Start Date">
                                    <div class="input-group-append">
                                        <span class="input-group-text">To</span>
                                    </div>
                                    <input id="enddateFilter" type="date" class="form-control date" placeholder="End Date">
                                </div>
                            </div>
                            <div class="form-group form-group-sm">
                                <label for="monthFilter" class="col-form-label col-form-label-sm">Month</label>
                                <div class="input-group input-group-sm">
                                    <input id="monthFilter" type="text" class="form-control" placeholder="Month Year Orders">
                                    <div class="input-group-append">
                                        <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group form-group-sm">
                                <label for="statusFilter" class="col-form-label col-form-label-sm">Status</label>
                                <div class="input-group input-group-sm">
                                    @Html.DropDownListFor(model => model.StatusList,
                                    new SelectList(Model.StatusList, "Id", "Name"),
                                    new { @id = "statusFilter", @class = "custom-select custom-select-sm", @placeholder = "Status" })

                                    <div class="input-group-append">
                                        <span class="input-group-text"><i class="fa fa-check"></i></span>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-sm btn-dark" onclick="reloadGridCustomerInvoice()"><span class="fa fa-search"></span> Search</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body" style="padding:2px 4px 2px 2px">
            <table id="jqGridMain"></table>
            <div id="jqGridPagerMain"></div>
        </div>
        <div class="card-footer bg-gray-active">
            <div class="row">
                <div class="col-md-8">
                    <div class="row">
                        <div class="ml-3" style="padding:2px!important">
                            <button class="btn btn-sm btn-outline-dark" type="button" style="width:80px" onclick="crudCustomerInvoice('Create','*')" @ViewBag.canCreate><i class="fa fa-pencil-square-o"></i> Create</button>
                            <button class="btn btn-sm btn-outline-dark" type="button" style="width:80px" onclick="reloadGridCustomerInvoice()"><i class="fa fa-refresh"></i> Refresh</button>
                        </div>
                        <div class="ml-3 mt-1">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" value="" id="sw-showhide" onclick="showhideCol('click')">
                                <label class="custom-control-label" for="sw-showhide"><small> Show all column</small></label>
                            </div>
                        </div>
                    </div>
                </div>
                @*<div class="col-md-4" style="padding-top:2px!important">
                        <div class="input-group input-group-sm">
                            <div class="input-group-prepend">
                                <button id="export" type="button" class="btn btn-primary" style="width:80px"><i class="fa fa-file-text-o"></i> Export</button>
                            </div>
                            @Html.DropDownListFor(model => model.ExportList,
                            new SelectList(Model.ExportList, "ExportID", "ExportName"),
                            new { @id = "ExportOption", @class = "form-control border-primary" })

                        </div>
                    </div>*@
            </div>
        </div>
    </div>

    @* NEW APPROVED *@

    <!-- Modal -->
    <div class="modal fade" id="ApprovedList" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title sm" id="exampleModalLabel">List Approved</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <label>Approved Name</label>
                    <div class="input-group input-group-sm">
                        <input type="text" id="NotaFaktur" hidden />
                        <input type="text" id="InvoiceNumber" hidden />
                        <select class="custom-select custom-select-sm" id="approvedName" name="approvedName" placeholder="Status">
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-sm btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" onclick="ReportPDF()" class="btn-sm btn btn-primary">Print</button>
                </div>
            </div>
        </div>
    </div>



    @*END*@

    @Html.Partial("CustomerInvoicePartial/Crud")
    @Html.Partial("CustomerInvoicePartial/Email")
    @Html.Partial("CustomerInvoicePartial/RecapDelivery")

</section>

<script>

    $.get("@Url.Action("ApprovedCustomListJson", "Reports")",
    function (data, txtStatus, jqXHR) {
        var datas = data;
        data.forEach((itm, idx) => {
            let label = `${itm.NameApproved} - ${itm.Jabatan}`;
            $("#approvedName").append($('<option></option>').val(itm.NameApproved).html(label));
        })
        }
    );

    $('#ApprovedList').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget); // Tombol yang diklik
        var notaFaktur = button.data('notafaktur'); // Ambil nilai dari data-NotaFaktur
        var invoiceNumber = button.data('invoicenumber'); // Ambil nilai dari data-InvoiceNumber
        $("#NotaFaktur").val(notaFaktur);
        $("#InvoiceNumber").val(invoiceNumber);
    })

    function ReportPDF() {
        previewCustomerInvoice('NotaFaktur', $("#InvoiceNumber").val(), 'pdf')
    }

    $(document).ready(function () {
        var mstart = $("#monthFilter");
        if (mstart.val() === "") {
            mstart.val(moment(new Date).format("MM/YYYY"))
        }

        $("#statusFilter").val("99");
    })

    $("#monthFilter").datepicker({
        format: "mm/yyyy",
        startView: "year",
        minViewMode: "months",
        autoclose: true,
    }).datepicker("setDate", moment(new Date).format("MM/YYYY"));

    $(function () {
        var filterData  = $('#searchFilter').val();
        var startdate   = $('#startdateFilter').val();
        var enddate     = $('#enddateFilter').val();
        var month       = $('#monthFilter').val();
        var status      = $('#statusFilter').val();
        $grid = $("#jqGridMain").jqGrid({
            url: '@Url.Action("CustomerInvoiceListJson", "FinanceAccounting")',
            datatype: "json",
            mtype: "GET",
            postData: {
                searchFilter: filterData,
                startdate: startdate,
                enddate: enddate,
                month: month,
                status: status,
            },
            colModel: [
                { label: 'Action', name: 'Action', align: 'center', fixed: true, width: 70, formatter: actionFormatter },
                { label: 'Document', name: 'Document', align: 'center', fixed: true, width: 80, formatter: documentFormatter },
                { label: 'Status', name: 'Status', align: 'center', fixed: true, width: 70, formatter: statusFormatter },
                { label: 'Number', name: 'InvoiceNumber', key: true, align: 'left', fixed: true, width: 150 },
                { label: 'Date', name: 'InvoiceDate', align: 'center', fixed: true, width: 80, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y" } },
                { label: 'Year', name: 'InvoiceYear', align: 'center', fixed: true, width: 40 },
                { label: 'Month', name: 'InvoiceMonth', align: 'center', fixed: true, width: 60, formatter: monthFormatter },
                { label: 'Customer', name: 'CustomerId', align: 'center', autoResizing: { minColWidth: 80 } },
                { label: 'Customer Name', name: 'CustomerName', align: 'left', fixed: true, width: 200 },
                { label: 'Del. Start', name: 'DOStart', align: 'center', fixed: true, width: 80, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y" } },
                { label: 'Del. End', name: 'DOEnd', align: 'center', fixed: true, width: 80, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y" } },
                { label: 'Sub Total', name: 'SubTotal', align: 'right', formatter: 'number', fixed: true, width: 100 },
                { label: 'PPN', name: 'PPN', align: 'right', formatter: 'number', fixed: true, width: 80 },
                { label: 'PPN%', name: 'PPNPercent', align: 'right', hidden: true, width: 80 },
                { label: 'PPH 23', name: 'PPH23', align: 'right', formatter: 'number', fixed: true, width: 80 },
                { label: 'GrandTotal', name: 'GrandTotal', align: 'right', formatter: 'number', fixed: true, width: 100 },
                { label: 'Remarks', name: 'Remarks', align: 'left', fixed: true, width: 120 },
                { label: 'Terms', name: 'Terms', align: 'left', fixed: true, width: 120 },
                { label: 'Approval', name: 'ApprovalLevel', align: 'center', fixed: true, width: 80, formatter: approvalFormatter },
                { label: 'Approval Name', name: 'ApprovalName', align: 'left', fixed: true, width: 200 },
                { label: 'Approval', name: 'Approval', align: 'left', hidden: true, width: 200 },
                { label: 'Status Name', name: 'StatusName', align: 'center', hidden: true, width: 60 },
                { label: 'Include PPh23', name: 'IncludePPH23', align: 'center', hidden: true, width: 60 },
                { label: 'Paid', name: 'Paid', align: 'center', hidden: true, width: 60, formatter: paidFormatter },
                { label: 'User', name: 'UserId', align: 'center', fixed: true, width: 60 },
                { label: 'Edited', name: 'EditDate', align: 'center', fixed: true, width: 100, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y H:i" } },
            ],
            gridview: true,
            loadonce: true,
            pager: '#jqGridPagerMain',
            rowNum: 20,
            rowList: [20, 50, 100],
            viewrecords: true,
            rownumbers: true,
            rownumWidth: 40,
            autoresizeOnLoad: true,
            autowidth: true,
            shrinkToFit: false,
            fromServer: true,
            //subGrid: true, // set the subGrid property to true to show expand buttons for each row
            //subGridRowExpanded: showForecastGrid, // javascript function that will take care of showing the child
            loadComplete: function () {
                var $this = $(this), ids = $this.jqGrid('getDataIDs'), i, l = ids.length;
                for (i = 0; i < l; i++) {
                    var newid = ids[i].replaceAll("/", "").replaceAll(".", "");
                    var btnid = 'btn-' + newid;
                    var preid = 'preview-' + newid;
                    showButton(ids[i], btnid);
                    showPreview(ids[i], preid);
                    //$("#" + ids[i]).attr("id", newid )
                }
            },
        }),
        $('#jqGridMain').jqGrid('navGrid', '#jqGridPagerMain', { search: false, edit: false, add: false, del: false });

    });

    function showForecastGrid(parentRowID, parentRowKey) {

        //Approval
        console.log(parentRowID);
        var childGridID = parentRowID + "_table";
        var childGridPagerID = parentRowID + "_pager";
        // add a table and pager HTML elements to the parent grid row - we will render the child grid here
        $('#' + parentRowID).append('<table id=' + childGridID + '></table><div id=' + childGridPagerID + ' class=scroll></div>');

        $("#" + childGridID).jqGrid({
            url: "@Url.Action("CustomerInvoiceApprovalListJson", "Invoicing")",
            mtype: "GET",
            datatype: "json",
            postData: {Invoicenumber : parentRowKey},
            page: 1,
            colModel: [
                { label: 'UserId', name: 'UserId', key: true, hidden: true, width: 100 },
                { label: 'User Name', name: 'UserName', width: 100 },
                { label: 'Approval', name: 'ApprovalName', width: 100 },
                { label: 'Email', name: 'ApprovalEmail', width: 100 },
                { label: 'Sent', name: 'SentEmail', width: 100 },
                { label: 'Sent Date', name: 'SentEmailDate', align: 'center', fixed: true, width: 100, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y H:i" } },
                { label: 'Approved', name: 'Approved', width: 100 },
                { label: 'Approved Date', name: 'ApprovedDate', align: 'center', fixed: true, width: 100, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y H:i" } },
            ],
            loadonce: true,
            width: 'auto',
            height: '100%',
            caption: 'Approval',
            //pager: "#" + childGridPagerID
        });

    }
    function actionFormatter(cellvalue, options, rowObject) {

        var canemail = "";
        var canupdate = "";
        var candelete = "";
        var btnid = rowObject.InvoiceNumber.replaceAll("/", "").replaceAll(".", "");

        if (rowObject.StatusName === "Open" || rowObject.StatusName === "Sent" || rowObject.StatusName === "Received") {
            canemail = '@ViewBag.canCreate';
            canupdate = '@ViewBag.canUpdate';
            candelete = '@ViewBag.canDelete';
        } else {
            canemail = 'disabled';
            canupdate = 'disabled';
            candelete = 'disabled';
        }

        var month = getMonthName(rowObject.InvoiceMonth);
        month += ", " + rowObject.InvoiceYear;

        var btn = "<div class='table-link'>";
        btn += "<a href='#' class='btn btn-sm btn-primary text-white " + canemail + "' onclick=\"sentCustomerInvoiceEmail('Open','" + rowObject.InvoiceNumber + "','" + rowObject.InvoiceDate + "','" + rowObject.CustomerName + "')\" datatoogle='tooltip' title='Sent Email @ViewBag.Title [ " + rowObject.InvoiceNumber + " ]'>";
        btn += "<span class='fa fa-envelope'></span>";
        btn += "</a> ";
        btn += "<a href='#' class='btn btn-sm btn-success text-white " + canupdate + "' onclick=\"crudCustomerInvoice('Update','" + rowObject.InvoiceNumber + "')\" datatoogle='tooltip' title='Edit @ViewBag.Title [ " + rowObject.InvoiceNumber + " ]'>";
        btn += "<span class='fa fa-pencil'></span> ";
        btn += "</a> ";
        btn += "<a id='btn-" + btnid + "' tabindex='0' class='btn btn-sm btn-info text-white " + candelete + "' role='button' data-toggle='popover' ";
        btn += "data-timeout='2000' data-html='true' title='Customer Invoice <br />" + rowObject.InvoiceNumber + "' data-content='-'>";
        btn += "<span class='fa fa-sign-out'></span>";
        btn += "</a>";
        btn += "</div>";


        return btn;
    }
    function paidFormatter(cellvalue, options, rowObject) {

        if (cellvalue === false) {
            return "<span class='badge badge-success'><i class='fa fa-check'></i></span>"
        }   else {
            var btn = "<div class='table-link'>";
            btn += "<a href='#' class='btn btn-sm btn-light text-danger border-danger @ViewBag.canSee' onclick=\"previewCustomerInvoice('Invoice','" + rowObject.InvoiceNumber + "')\" datatoogle='tooltip' title='Preview @ViewBag.Title [ " + rowObject.InvoiceNumber + " ]'>";
            btn += "<span class='fa fa-file-pdf-o'></span></span><small> Paid</small>";
            btn += "</a> ";
            btn += "</div>";
        }

        return btn;
    }
    function documentFormatter(cellvalue, options, rowObject) {
        var btnid = rowObject.InvoiceNumber.replaceAll("/", "").replaceAll(".","");

        var btn = "<div class='table-link'>";
        btn += "<a id='preview-" + btnid + "' tabindex='0' class='btn btn-sm btn-light text-primary border-primary @ViewBag.canSee' role='button' data-toggle='popover' ";
        btn += "data-timeout='2000' data-html='true' title='Document Invoice <br/>" + rowObject.InvoiceNumber + "' data-content='-'>";
        btn += "<span class='fa fa-file-o'></span></span><small> Preview</small>";
        btn += "</a>";
        btn += "</div>";

        return btn;
    }

    function showButton(InvoiceNumber,id) {

        var dataContent = "<div>";
        dataContent += "<ul class='nav'><li>";
        @*dataContent += "<button type='button' class='btn btn-sm btn-info @ViewBag.canUpdate' onclick=\"crudCustomerInvoice('Closed','" + InvoiceNumber + "')\" ><span class='fa fa-sign-out'></span> Closing</button>";*@
        dataContent += "<button type='button' href='#' class='btn btn-sm btn-warning ml-2 @ViewBag.canDelete' onclick=\"crudCustomerInvoice('Canceled','" + InvoiceNumber + "')\" ><span class='fa fa-ban'></span> Canceled</button>";
        dataContent += "<button type='button' href='#' class='btn btn-sm btn-danger ml-2 @ViewBag.canDelete' onclick=\"crudCustomerInvoice('Delete','" + InvoiceNumber + "')\" ><span class='fa fa-trash'></span> Delete</button>";
        dataContent += "</li></ul></div>";

        $('#' + id).attr('data-content', dataContent).popover();

    }

    function showPreview(InvoiceNumber,id) {

        var dataContent = "<div>";
        dataContent += "<ul class='nav'><li>";
        @*dataContent += "<button type='button' class='btn btn-link text-danger @ViewBag.canUpdate' onclick=\"previewCustomerInvoice('NotaFaktur','" + InvoiceNumber + "','pdf')\" ><span class='fa fa-file-pdf-o'></span> Nota Faktur</a><br/>";*@
        dataContent += "<button type='button' class='btn btn-link text-danger @ViewBag.canUpdate' data-toggle='modal' data-target='#ApprovedList' data-NotaFaktur='NotaFaktur' data-InvoiceNumber='" + InvoiceNumber +"'><span class='fa fa-file-pdf-o'></span> Nota Faktur</a><br/>";
        dataContent += "<button type='button' class='btn btn-link text-danger @ViewBag.canUpdate' onclick=\"previewCustomerInvoice('RecapDelivery','" + InvoiceNumber + "','pdf')\" ><span class='fa fa-file-pdf-o'></span> Recapitulation By Delivery</a><br/>";
        dataContent += "<button type='button' class='btn btn-link text-danger @ViewBag.canUpdate' onclick=\"previewCustomerInvoice('RecapPartNumber','" + InvoiceNumber + "','pdf')\" ><span class='fa fa-file-pdf-o'></span> Recapitulation By Part Number</a>";
        dataContent += "<hr/>";
        dataContent += "<button type='button' class='btn btn-link text-success @ViewBag.canUpdate mt-0 pt-0' onclick=\"previewCustomerInvoice('NotaFaktur','" + InvoiceNumber + "','xls')\" ><span class='fa fa-file-excel-o'></span> Nota Faktur</a><br/>";
        dataContent += "<button type='button' class='btn btn-link text-success @ViewBag.canUpdate' onclick=\"previewCustomerInvoice('RecapDelivery','" + InvoiceNumber + "','xls')\" ><span class='fa fa-file-excel-o'></span> Recapitulation By Delivery</a><br/>";
        dataContent += "<button type='button' class='btn btn-link text-success @ViewBag.canUpdate' onclick=\"previewCustomerInvoice('RecapPartNumber','" + InvoiceNumber + "','xls')\" ><span class='fa fa-file-excel-o'></span> Recapitulation By Part Number</a>";
        dataContent += "</li></ul></div>";

        $('#' + id).attr('data-content', dataContent).popover();

    }

    function previewCustomerInvoice(action, Invoicenumber, fileformat) {

        switch (action) {
            case "NotaFaktur":
                var url = "/Reports/InvoiceNotaFaktur?InvoiceNumber=" + Invoicenumber + "&FileFormat=" + fileformat + "&ApprovedName=" + $("#approvedName").val();
                break;
            case "RecapDelivery":
                var url = "/Reports/InvoiceRecapDelivery?InvoiceNumber=" + Invoicenumber + "&FileFormat=" + fileformat;
                break;
            case "RecapPartNumber":
                var url = "/Reports/InvoiceRecapPartNumber?InvoiceNumber=" + Invoicenumber + "&FileFormat=" + fileformat;
                break;
        }
        window.open(url, "_blank");
    }

    function monthFormatter(cellvalue, options, rowObject) {
        var monthname = getMonthName(cellvalue)
        return monthname;
    }


    function statusFormatter(cellvalue, options, rowObject) {
        switch (cellvalue) {
            case 0:
                return "<span class='badge badge-primary'>" + rowObject.StatusName + "</span>"
                break;
            case 1:
                return "<span class='badge badge-info text-white'>" + rowObject.StatusName + "</span>"
                break;
            case 2:
                return "<span class='badge badge-info text-white'>" + rowObject.StatusName + "</span>"
                break;
            case 3:
                return "<span class='badge badge-success text-white'>" + rowObject.StatusName + "</span>"
                break;
            case 4:
                return "<span class='badge badge-warning'>" + rowObject.StatusName + "</span>"
                break;
            case 5:
                return "<span class='badge badge-danger'>" + rowObject.StatusName + "</span>"
                break;
        }
    }

    function approvalFormatter(cellvalue, options, rowObject) {
        switch (cellvalue) {
            case 1:
                return "<span class='badge badge-warning'>" + rowObject.ApprovalName + "</span>"
                break;
            case 2:
                return "<span class='badge badge-info text-white'>" + rowObject.ApprovalName + "</span>"
                break;
            case 3:
                return "<span class='badge badge-primary'>" + rowObject.ApprovalName + "</span>"
                break;
            case 4:
                return "<span class='badge badge-success'>" + rowObject.ApprovalName + "</span>"
                break;
        }
    }
    function reloadGridCustomerInvoice() {
        var filterData = $('#searchFilter').val();
        var startdate = $('#startdateFilter').val();
        var enddate = $('#enddateFilter').val();
        var month = $('#monthFilter').val();
        var status = $('#statusFilter').val();
        $("#jqGridMain").jqGrid('setGridParam', {
            datatype: 'json',
            mtype: 'GET',
            postData: {
                searchFilter: filterData,
                startdate: startdate,
                enddate: enddate,
                month: month,
                status: status,
            }
        }).trigger('reloadGrid');
    };

    function doSuccess(data, action) {
        switch (action) {
            case "create":
                showToast("Success", "Create " + data.InvoiceNumber + " has been saved succesfully");
                var custname = $("#crud-CustomerInvoiceCustomerId :selected").text();
                sentCustomerInvoiceEmail("Open", data.InvoiceNumber, data.InvoiceDate, custname)
                $("#btn-EmailApproval").click();
               return reloadGridCustomerInvoice();
                break;
            case "update":
                showToast("Success", "Update " + data.InvoiceNumber + " has been saved succesfully");
                var custname = $("#crud-CustomerInvoiceCustomerId :selected").text();
                sentCustomerInvoiceEmail("Open", data.InvoiceNumber, data.InvoiceDate, custname)
                $("#btn-EmailApproval").click();
                return reloadGridCustomerInvoice();
                break;
            case "delete":
                showToast("Failed", "Delete " + data.InvoiceNumber + " has been removed succesfully");
                return reloadGridCustomerInvoice();
                break;
            case "canceled":
                showToast("Failed", "Cancel order " + data.InvoiceNumber + " has been canceled succesfully");
                return reloadGridCustomerInvoice();
                break;
            case "closed":
                showToast("Success", "Closing order " + data.InvoiceNumber + " has been closed succesfully");
                return reloadGridCustomerInvoice();
                break;
        }
    }

    $("#searchFilter").on('keypress', function (e) {
        if (e.which == 13) {
            $("#btnFilter").button().click();
        }
    });

    function showhideCol(event) {

        var res = $("#sw-showhide").prop("checked");
        var showhideCol = "";

        if (res === true) {
            showhideCol = 'showCol';
        } else {
            showhideCol = 'hideCol';
        }


        //if (event != "load") {
        //    reloadGridCustomerInvoice();
        //}

        $("#jqGridMain").jqGrid(showhideCol, "CustomerName")
        $("#jqGridMain").jqGrid(showhideCol, "DOStart")
        $("#jqGridMain").jqGrid(showhideCol, "DOEnd")
        $("#jqGridMain").jqGrid(showhideCol, "Remarks")
        $("#jqGridMain").jqGrid(showhideCol, "Terms")
        $("#jqGridMain").jqGrid(showhideCol, "ApprovalName")
        $("#jqGridMain").jqGrid(showhideCol, "UserId")
        $("#jqGridMain").jqGrid(showhideCol, "EditDate")

    };

    $(document).ready(function () {
        showhideCol("load");
    });

    $("#export").on("click", function () {
        var res = $("#sw-showhide").prop("checked");
        var orientation;
        if (res === true) {
            orientation = "landscape";
        } else {
            orientation = "portrait";
        }

        $("#jqGridMain").jqGrid("hideCol", "Logo")
        exportGrid('#jqGridMain', 'A4', '@ViewBag.Title', orientation);
        $("#jqGridMain").jqGrid("showCol", "Logo")

    })


</script>

<!-- toast-alert -->
@Html.Partial("_VSSPLayout/Messages/toast_alert")
