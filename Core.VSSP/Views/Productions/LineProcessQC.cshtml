@model Core.VSSP.Models.LineProcessListModel

<section class="app-section" id="Productions-LineProcess">
    <div class="card card-accent-secondary">
        <div class="card-header bg-white">
            <div class="row">
                <div class="col-md-11">
                    <div class="card-title">
                        <i class="@ViewBag.IconClass"></i> @ViewBag.Title
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="dropdown">
                        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="fa fa-filter"></span> Filter
                        </button>
                        <form id="form-filter" class="dropdown-menu dropdown-menu-right p-4 bg-light" style="width:320px">
                            <h6>Filter @ViewBag.Title</h6>
                            <hr />
                            <div class="form-group form-group-sm">
                                <div class="input-group input-group-sm">
                                    <input id="searchFilter" name="searchFilter" type="text" class="form-control" placeholder="Order Number or Line...">
                                    <div class="input-group-append">
                                        <span class="input-group-text"><i class="fa fa-navicon"></i></span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group form-group-sm">
                                <label for="dateFilter" class="col-form-label col-form-label-sm">Date</label>
                                <div class="input-group input-group-sm">
                                    <input id="dateFilter" type="date" class="form-control datepicker" placeholder="Production Date" required>
                                    <div class="input-group-append">
                                        <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                    </div>
                                    @*<div class="input-group-append">
                                            <span class="input-group-text">To</span>
                                        </div>
                                        <input id="dateFilter" type="date" class="form-control date" placeholder="End Date">*@
                                </div>
                            </div>
                            @*<div class="form-group form-group-sm">
                                    <label for="monthFilter" class="col-form-label col-form-label-sm">Month</label>
                                    <div class="input-group input-group-sm">
                                        <input id="monthFilter" type="text" class="form-control" placeholder="Month Year Orders">
                                        <div class="input-group-append">
                                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group form-group-sm">
                                    <label for="statusFilter" class="col-form-label col-form-label-sm">Status</label>
                                    <div class="input-group input-group-sm">
                                        @Html.DropDownListFor(model => model.StatusList,
                                        new SelectList(Model.StatusList, "Id", "Name"),
                                        new { @id = "statusFilter", @class = "custom-select custom-select-sm", @placeholder = "Status" })

                                        <div class="input-group-append">
                                            <span class="input-group-text"><i class="fa fa-check"></i></span>
                                        </div>
                                    </div>
                                </div>*@
                            <button type="button" class="btn btn-sm btn-dark" onclick="reloadGridLineProcess()"><span class="fa fa-search"></span> Search</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body" style="padding:2px 4px 2px 2px">
            <table id="jqGridMain"></table>
            <div id="jqGridPagerMain"></div>
        </div>
        <div class="card-footer bg-gray-active">
            <div class="row">
                <div class="col-md-8">
                    <div class="row">
                        <div class="ml-3" style="padding:2px!important">
                            <button class="btn btn-sm btn-outline-dark" type="button" style="width:80px" onclick="crudLineProcess('Initialize','*')" @ViewBag.canCreate><i class="fa fa-pencil-square-o"></i> Create</button>
                            <button class="btn btn-sm btn-outline-dark" type="button" style="width:80px" onclick="reloadGridLineProcess()"><i class="fa fa-refresh"></i> Refresh</button>
                        </div>
                        <div class="ml-3 mt-1">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" value="" id="sw-showhide" onclick="showhideCol('click')">
                                <label class="custom-control-label" for="sw-showhide"><small> Show all column</small></label>
                            </div>
                        </div>
                    </div>
                </div>
                @*<div class="col-md-4" style="padding-top:2px!important">
                        <div class="input-group input-group-sm">
                            <div class="input-group-prepend">
                                <button id="export" type="button" class="btn btn-primary" style="width:80px"><i class="fa fa-file-text-o"></i> Export</button>
                            </div>
                            @Html.DropDownListFor(model => model.ExportList,
                            new SelectList(Model.ExportList, "ExportID", "ExportName"),
                            new { @id = "ExportOption", @class = "form-control border-primary" })

                        </div>
                    </div>*@
            </div>
        </div>
    </div>

    @Html.Partial("LineProcessQCPartial/Crud")
    @Html.Partial("LineProcessQCPartial/CrudNG")
    @Html.Partial("LineProcessQCPartial/DeleteKanban")
    @Html.Partial("LineProcessQCPartial/DeletePartNG")


</section>

<script>

    $(document).ready(function () {

        var proddate = $("#dateFilter");
        if (proddate.val() === "") {
            proddate.val(moment(new Date).format("YYYY-MM-DD"))
        }

    })

    $(function () {
        var filterData  = $('#searchFilter').val();
        var proddate = $('#dateFilter').val();
        var lineid = "@ViewBag.AreaId"
        var userid = "@ViewBag.UserId"
        $grid = $("#jqGridMain").jqGrid({
            url: '@Url.Action("LineProcessJson", "Productions")',
            datatype: "json",
            mtype: "GET",
            postData: {
                searchFilter: filterData,
                productionDate: proddate,
                lineId: lineid,
                userId: userid,
            },
            colModel: [
                //{ label: 'Document', name: 'Document', align: 'center', fixed: true, width: 110, formatter: documentFormatter },
                //{ label: 'Status', name: 'Status', align: 'center', fixed: true, width: 70, formatter: statusFormatter },
                { label: 'Date', name: 'ProductionDate', align: 'center', fixed: true, width: 80, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y" } },
                //{ label: 'Year', name: 'ProductionYear', align: 'center', fixed: true, width: 40 },
                //{ label: 'Month', name: 'ProductionMonth', align: 'center', fixed: true, width: 60, formatter: monthFormatter },
                { label: 'Shift', name: 'ShiftId', align: 'center', fixed: true, width: 40 },
                { label: 'Line', name: 'LineId', align: 'center', fixed: true, width: 50 },
                { label: 'Line Name', name: 'LineName', align: 'left', fixed: true, width: 120 },
                { label: 'Customer', name: 'CustomerId', align: 'center', fixed: true, width: 60 },
                { label: 'Customer Name', name: 'CustomerName', align: 'left', fixed: true, width: 180 },
                { label: 'Unique', name: 'UniqueNumber', align: 'center', fixed: true, width: 50 },
                { label: 'Part Number', name: 'PartNumber', align: 'center', fixed: true, width: 110 },
                { label: 'Part Name', name: 'PartName', align: 'left', autoResizing: { minColWidth: 80 } },
                { label: 'Kanbans', name: 'TotalKanban', align: 'center', fixed: true, width: 60 },
                { label: 'Qty', name: 'TotalQtyOK', align: 'center', fixed: true, width: 60 },
                //{ label: 'Qty NG', name: 'TotalQtyNG', align: 'center', fixed: true, width: 60 },
                { label: 'Unit', name: 'UnitLevel2', align: 'center', fixed: true, width: 40 },
                { label: 'User', name: 'UserId', align: 'center', fixed: true, width: 60 },
                //{ label: 'Edited', name: 'EditDate', align: 'center', fixed: true, width: 100, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y H:i" } },
            ],
            gridview: true,
            loadonce: true,
            pager: '#jqGridPagerMain',
            rowNum: 20,
            rowList: [20, 50, 100],
            viewrecords: true,
            rownumbers: true,
            rownumWidth: 40,
            autoresizeOnLoad: true,
            autowidth: true,
            shrinkToFit: false,
            fromServer: true,
            subGrid: true, // set the subGrid property to true to show expand buttons for each row
            subGridRowExpanded: showProductionGrid, // javascript function that will take care of showing the child
            loadComplete: function () {
                var $this = $(this), ids = $this.jqGrid('getDataIDs'), i, l = ids.length;
            },
        }),
        $('#jqGridMain').jqGrid('navGrid', '#jqGridPagerMain', { search: false, edit: false, add: false, del: false });

    });

    var subGridId = "";
    var subGridNGId = "";

    function showProductionGrid(parentRowID, parentRowKey) {

        //Approval
        var childGridID = parentRowID + "_table";
        var childGridPagerID = parentRowID + "_pager";
        var childGridNGID = parentRowID + "_NG_table";
        var childGridPagerNGID = parentRowID + "_NG_pager";

        subGridId = childGridID;
        subGridNGId = childGridNGID;

        // add a table and pager HTML elements to the parent grid row - we will render the child grid here
        var Grid = $('#jqGridMain'),
            selectedRowId   = parentRowKey,
            ProductionDate  = Grid.jqGrid('getCell', selectedRowId, 'ProductionDate'),
            ShiftId         = Grid.jqGrid('getCell', selectedRowId, 'ShiftId'),
            LineId          = Grid.jqGrid('getCell', selectedRowId, 'LineId'),
            CustomerId      = Grid.jqGrid('getCell', selectedRowId, 'CustomerId'),
            PartNumber      = Grid.jqGrid('getCell', selectedRowId, 'PartNumber'),
            UserId          = Grid.jqGrid('getCell', selectedRowId, 'UserId');

        $('#' + parentRowID).append('<table id=' + childGridID + '></table><div id=' + childGridPagerID + ' class=scroll></div>');

        $("#" + childGridID).jqGrid({
            url: "@Url.Action("LineProcessListJson", "Productions")",
            mtype: "GET",
            datatype: "json",
            postData: {
                productionDate  : ProductionDate,
                shiftId         : ShiftId,
                lineId          : LineId,
                customerId      : CustomerId,
                partNumber      : PartNumber,
                userId          : UserId,
            },
            page: 1,
            colModel: [
                { label: 'Action', name: 'Action', align: 'center', fixed: true, width: 70, formatter: actionFormatter },
                { label: 'Production #', name: 'ProductionNumber', key: true, align: 'center', fixed: true, width: 130 },
                { label: 'Date', name: 'ProductionDate', align: 'center', fixed: true, width: 80, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y" } },
                { label: 'Kanban #', name: 'KanbanKey', align: 'center', fixed: true, width: 65 },
                { label: 'Run', name: 'KanbanRun', align: 'center', fixed: true, width: 40 },
                { label: 'Shift', name: 'ShiftId', align: 'center', fixed: true, width: 40 },
                { label: 'Line', name: 'LineId', align: 'center', hidden: true, width: 50 },
                { label: 'Customer', name: 'CustomerId', align: 'center', fixed: true, width: 60 },
                { label: 'Unique', name: 'UniqueNumber', align: 'center', fixed: true, width: 50 },
                { label: 'Part Number', name: 'PartNumber', align: 'center', fixed: true, width: 110 },
                { label: 'Part Name', name: 'PartName', align: 'left', fixed: true, width: 150 },
                { label: 'Qty', name: 'Qty_OK', align: 'center', fixed: true, width: 40 },
                //{ label: 'Qty NG', name: 'Qty_NG', width: 100 },
                { label: 'Unit', name: 'UnitLevel2', align: 'center', fixed: true, width: 50 },
                { label: 'PIC', name: 'UserId', align: 'center', fixed: true, width: 60 },
                { label: 'Scanned', name: 'EditDate', align: 'center', fixed: true, width: 100, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y H:i" } },
            ],
            loadonce: true,
            width: 'auto',
            height: '100%',
            caption: 'Production Kanban',
            //pager: "#" + childGridPagerID
        });

        $('#' + parentRowID).append('<table id=' + childGridNGID + '></table><div id=' + childGridPagerNGID + ' class=scroll></div>');

        $("#" + childGridNGID).jqGrid({
            url: "@Url.Action("NGProcessListJson", "Productions")",
            mtype: "GET",
            datatype: "json",
            postData: {
                productionDate  : ProductionDate,
                shiftId         : ShiftId,
                lineId          : LineId,
                customerId      : CustomerId,
                partNumber      : PartNumber,
                userId          : UserId,
            },
            page: 1,
            colModel: [
                { label: 'Action', name: 'Action', align: 'center', fixed: true, width: 70, formatter: actionNGFormatter },
                { label: 'Production #', name: 'ProductionNumber', key: true, align: 'center', fixed: true, width: 130 },
                { label: 'Date', name: 'ProductionDate', align: 'center', fixed: true, width: 80, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y" } },
                { label: 'Shift', name: 'ShiftId', align: 'center', fixed: true, width: 40 },
                { label: 'Line', name: 'LineId', align: 'center', hidden: true, width: 50 },
                { label: 'Customer', name: 'CustomerId', align: 'center', hidden: true, width: 60 },
                { label: 'Unique', name: 'UniqueNumber', align: 'center', hidden: true, width: 50 },
                { label: 'Part Number', name: 'PartNumber', align: 'center', hidden: true, width: 110 },
                { label: 'Part Name', name: 'PartName', align: 'left', hidden: true, width: 150 },
                { label: 'Defect Id', name: 'DefectId', align: 'left', fixed: true, width: 70 },
                { label: 'Defect Name', name: 'DefectName', align: 'left' },
                { label: 'Qty', name: 'Qty_NG', align: 'center', fixed: true, width: 40 },
                { label: 'Unit', name: 'UnitLevel2', align: 'center', fixed: true, width: 50 },
                { label: 'Repair', name: 'Repair', align: 'center', fixed: true, width: 50, formatter: activeFormatter },
                { label: 'Scrap', name: 'Scrap', align: 'center', fixed: true, width: 50, formatter: activeFormatter },
                { label: 'PIC', name: 'UserId', align: 'center', fixed: true, width: 60 },
                { label: 'Created', name: 'EditDate', align: 'center', fixed: true, width: 100, formatter: "date", formatoptions: { srcformat: "ISO8601Long", newformat: "d M Y H:i" } },
            ],
            loadonce: true,
            width: 'auto',
            height: '100%',
            caption: 'N/G Part List',
            //pager: "#" + childGridPagerID
        });


    }


    function actionFormatter(cellvalue, options, rowObject) {

        var canupdate = "";
        var candelete = "";

        var btn = "<div class='table-link'>";
        btn += "<a href='#' class='btn btn-sm btn-danger text-white " + candelete + "' onclick=\"crudLineProcess('Delete','" + rowObject.ProductionNumber + "','" + subGridId + "')\" datatoogle='tooltip' title='Delete @ViewBag.Title [ " + rowObject.ProductionNumber + " ]'>";
        btn += "<span class='fa fa-trash-o'></span> Delete";
        btn += "</a> ";
        btn += "</div>";


        return btn;
    }

    function actionNGFormatter(cellvalue, options, rowObject) {

        var canupdate = "";
        var candelete = "";

        var btn = "<div class='table-link'>";
        btn += "<a href='#' class='btn btn-sm btn-danger text-white " + candelete + "' onclick=\"crudLineProcess('DeleteNG','" + rowObject.ProductionNumber + "','" + subGridNGId + "')\" datatoogle='tooltip' title='Delete @ViewBag.Title [ " + rowObject.ProductionNumber + " ]'>";
        btn += "<span class='fa fa-trash-o'></span> Delete";
        btn += "</a> ";
        btn += "</div>";


        return btn;
    }

    function documentFormatter(cellvalue, options, rowObject) {

        var btn = "<div class='table-link'>";
        btn += "<a href='#' class='btn btn-sm btn-light text-danger border-danger @ViewBag.canSee' onclick=\"previewLineProcess('PRL','" + rowObject.OrderNumber + "')\" datatoogle='tooltip' title='Preview @ViewBag.Title [ " + rowObject.OrderNumber + " ]'>";
        btn += "<span class='fa fa-file-pdf-o'></span></span><small> PRL</small>";
        btn += "</a> ";
        btn += "<a href='#' class='btn btn-sm btn-light text-danger border-danger @ViewBag.canSee' onclick=\"previewLineProcess('MLOK','" + rowObject.OrderNumber + "')\" datatoogle='tooltip' title='Preview Master List Of Kanban [ " + rowObject.OrderNumber + " ]'>";
        btn += "<span class='fa fa-file-pdf-o'></span><small> MLOK</small>";
        btn += "</a> ";
        btn += "</div>";

        return btn;
    }
    function showButton(OrderNumber,id) {

        var dataContent = "<div>";
        dataContent += "<ul class='nav'><li>";
        dataContent += "<a href='#' class='btn btn-sm btn-info @ViewBag.canUpdate' onclick=\"crudLineProcess('Closed','" + OrderNumber + "')\" ><i class='fa fa-sign-out'></i> Closing</a>";
        dataContent += "<a href='#' class='btn btn-sm btn-warning ml-2 @ViewBag.canDelete' onclick=\"crudLineProcess('Canceled','" + OrderNumber + "')\" ><i class='fa fa-ban'></i> Canceled</a>";
        dataContent += "<a href='#' class='btn btn-sm btn-danger ml-2 @ViewBag.canDelete' onclick=\"crudLineProcess('Delete','" + OrderNumber + "')\" ><i class='fa fa-trash'></i> Delete</a>";
        dataContent += "</li></ul></div>";

        $('#' + id).attr('data-content', dataContent).popover();

    }

    function previewLineProcess(action, ordernumber) {

        if (action == "PRL") {
            var url = "@Url.Action("LineProcesss", "Reports", new { ordernumber = "_ordernumber_" })";
            url = url.replace('_ordernumber_', encodeURIComponent(ordernumber));
            window.open(url, "_blank");
        } else {
            var url = "@Url.Action("MasterListKanban", "Reports", new { ordernumber = "_ordernumber_" })";
            url = url.replace('_ordernumber_', encodeURIComponent(ordernumber));
            window.open(url, "_blank");
        }
    }

    function monthFormatter(cellvalue, options, rowObject) {
        var monthname = getMonthName(cellvalue)
        return monthname;
    }


    function statusFormatter(cellvalue, options, rowObject) {
        switch (cellvalue) {
            case 0:
                return "<span class='badge badge-primary'>" + rowObject.StatusName + "</span>"
                break;
            case 1:
                return "<span class='badge badge-info text-white'>" + rowObject.StatusName + "</span>"
                break;
            case 2:
                return "<span class='badge badge-info text-white'>" + rowObject.StatusName + "</span>"
                break;
            case 3:
                return "<span class='badge badge-success text-white'>" + rowObject.StatusName + "</span>"
                break;
            case 4:
                return "<span class='badge badge-warning'>" + rowObject.StatusName + "</span>"
                break;
            case 5:
                return "<span class='badge badge-danger'>" + rowObject.StatusName + "</span>"
                break;
        }
    }

    function activeFormatter(cellvalue, options, rowObject) {
        if (cellvalue == true) {
            return "<span class='fa fa-check text-success'></span>"
        } else {
            return "<span class='fa fa-times text-danger'></span>"
        }
    }

    function approvalFormatter(cellvalue, options, rowObject) {
        switch (cellvalue) {
            case 1:
                return "<span class='badge badge-warning'>" + rowObject.ApprovalName + "</span>"
                break;
            case 2:
                return "<span class='badge badge-info text-white'>" + rowObject.ApprovalName + "</span>"
                break;
            case 3:
                return "<span class='badge badge-primary'>" + rowObject.ApprovalName + "</span>"
                break;
            case 4:
                return "<span class='badge badge-success'>" + rowObject.ApprovalName + "</span>"
                break;
        }
    }
    function reloadGridLineProcess() {
        var filterData  = $('#searchFilter').val();
        var proddate = $('#dateFilter').val();
        var lineid = "@ViewBag.AreaId"
        var userid = "@ViewBag.UserId"
        $("#jqGridMain").jqGrid('setGridParam', {
            datatype: 'json',
            mtype: 'GET',
            postData: {
                searchFilter: filterData,
                productionDate: proddate,
                lineId: lineid,
                userId: userid,
            }
        }).trigger('reloadGrid');
    };

    function doSuccess(data, action) {
        switch (action) {
            case "create":
                showToast("Success", "Create " + data.ProductionNumber + " has been saved succesfully");
                return reloadGridLineProcess();
                break;
            case "update":
                showToast("Success", "Update " + data.ProductionNumber + " has been saved succesfully");
                return reloadGridLineProcess();
                break;
            case "delete":
                showToast("Failed", "Delete " + data.ProductionNumber + " has been removed succesfully");
                return reloadGridLineProcess();
                break;
            case "canceled":
                showToast("Failed", "Cancel order " + data.ProductionNumber + " has been canceled succesfully");
                return reloadGridLineProcess();
                break;
            case "closed":
                showToast("success", "Closing order " + data.ProductionNumber + " has been closed succesfully");
                return reloadGridLineProcess();
                break;
        }
    }

    $("#searchFilter").on('keypress', function (e) {
        if (e.which == 13) {
            $("#btnFilter").button().click();
        }
    });

    function showhideCol(event) {

        var res = $("#sw-showhide").prop("checked");
        var showhideCol = "";

        if (res === true) {
            showhideCol = 'showCol';
        } else {
            showhideCol = 'hideCol';
        }


        if (event != "load") {
            window.location.reload();
            //reloadGridLineProcess();
        }

        $("#jqGridMain").jqGrid(showhideCol, "LineName")
        $("#jqGridMain").jqGrid(showhideCol, "Remarks")
        $("#jqGridMain").jqGrid(showhideCol, "CustomerName")
        $("#jqGridMain").jqGrid(showhideCol, "Approval")

    };

    $(document).ready(function () {
        showhideCol("load");
    });

    $("#export").on("click", function () {
        var res = $("#sw-showhide").prop("checked");
        var orientation;
        if (res === true) {
            orientation = "landscape";
        } else {
            orientation = "portrait";
        }

        $("#jqGridMain").jqGrid("hideCol", "Logo")
        exportGrid('#jqGridMain', 'A4', '@ViewBag.Title', orientation);
        $("#jqGridMain").jqGrid("showCol", "Logo")

    })

    $("#crudLineProcessListModal").on('hide.bs.modal', function () {
        reloadGridLineProcess();
    });

</script>

<!-- toast-alert -->
@Html.Partial("_VSSPLayout/Messages/toast_alert")
